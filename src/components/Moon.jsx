/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 public/models/lp.glb
*/

import { useGLTF, PerspectiveCamera, useScroll, Sphere } from '@react-three/drei'
import gsap from "gsap";
import { useLayoutEffect, useRef } from 'react';
import { useFrame, useThree } from '@react-three/fiber';

import * as THREE from 'three';
import { Mesh } from 'three';

export const FLOOR_HEIGHT = 3;
export const NB_FLOORS = 2;

export function Moon(props) {
  const { nodes, materials } = useGLTF('./models/Moon.glb')
  const ref = useRef();
  const tl = useRef();

  const scroll = useScroll();



  useFrame(() => {
    tl.current.seek(scroll.offset * tl.current.duration());
  });


  useLayoutEffect(() => {
    tl.current = gsap.timeline();

    //ROTATION
    tl.current.from(
      ref.current.rotation,
      {
        duration: 4,
        y: -3,
      },
      0
    )

    //VERTICAL ANIMATION
    tl.current.to(
      ref.current.position,
      {
        duration: 2.5,
        x: -FLOOR_HEIGHT * (NB_FLOORS - 1),
        y: -FLOOR_HEIGHT * (NB_FLOORS - 1) / 3,

      },
      0.5
    );

  }, []);

  return (
    <group {...props} dispose={null} ref={ref}>
      <group rotation={[-1.569, -0.001, 2.269]} position={[0, 0, 0]} scale={.002}>

        <mesh geometry={nodes.Cube008.geometry} material={materials['Default OBJ.005']} />
      </group>
    </group>
  )
}

useGLTF.preload('./models/Moon.glb')



